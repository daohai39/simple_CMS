{"version":3,"sources":["laroute.js"],"names":[],"mappingsfile":"frontend.js","sourcesContent":["(function () {\n\n    var laroute = (function () {\n\n        var routes = {\n\n            absolute: false,\n            rootUrl: 'decoks.dev',\n            routes : [{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"\\/\",\"name\":null,\"action\":\"Closure\"},{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"admin\\/category\",\"name\":\"admin.category.index\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@index\"},{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"admin\\/category\\/create\",\"name\":\"admin.category.create\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@create\"},{\"host\":null,\"methods\":[\"POST\"],\"uri\":\"admin\\/category\",\"name\":\"admin.category.store\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@store\"},{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"admin\\/category\\/{category}\",\"name\":\"admin.category.show\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@show\"},{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"admin\\/category\\/{category}\\/edit\",\"name\":\"admin.category.edit\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@edit\"},{\"host\":null,\"methods\":[\"PUT\",\"PATCH\"],\"uri\":\"admin\\/category\\/{category}\",\"name\":\"admin.category.update\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@update\"},{\"host\":null,\"methods\":[\"DELETE\"],\"uri\":\"admin\\/category\\/{category}\",\"name\":\"admin.category.destroy\",\"action\":\"App\\Http\\Controllers\\Backend\\CategoryController@destroy\"},{\"host\":null,\"methods\":[\"GET\",\"HEAD\"],\"uri\":\"api\\/user\",\"name\":null,\"action\":\"Closure\"}],\n            prefix: '',\n\n            route : function (name, parameters, route) {\n                route = route || this.getByName(name);\n\n                if ( ! route ) {\n                    return undefined;\n                }\n\n                return this.toRoute(route, parameters);\n            },\n\n            url: function (url, parameters) {\n                parameters = parameters || [];\n\n                var uri = url + '/' + parameters.join('/');\n\n                return this.getCorrectUrl(uri);\n            },\n\n            toRoute : function (route, parameters) {\n                var uri = this.replaceNamedParameters(route.uri, parameters);\n                var qs  = this.getRouteQueryString(parameters);\n\n                return this.getCorrectUrl(uri + qs);\n            },\n\n            replaceNamedParameters : function (uri, parameters) {\n                uri = uri.replace(/\\{(.*?)\\??\\}/g, function(match, key) {\n                    if (parameters.hasOwnProperty(key)) {\n                        var value = parameters[key];\n                        delete parameters[key];\n                        return value;\n                    } else {\n                        return match;\n                    }\n                });\n\n                // Strip out any optional parameters that were not given\n                uri = uri.replace(/\\/\\{.*?\\?\\}/g, '');\n\n                return uri;\n            },\n\n            getRouteQueryString : function (parameters) {\n                var qs = [];\n                for (var key in parameters) {\n                    if (parameters.hasOwnProperty(key)) {\n                        qs.push(key + '=' + parameters[key]);\n                    }\n                }\n\n                if (qs.length < 1) {\n                    return '';\n                }\n\n                return '?' + qs.join('&');\n            },\n\n            getByName : function (name) {\n                for (var key in this.routes) {\n                    if (this.routes.hasOwnProperty(key) && this.routes[key].name === name) {\n                        return this.routes[key];\n                    }\n                }\n            },\n\n            getByAction : function(action) {\n                for (var key in this.routes) {\n                    if (this.routes.hasOwnProperty(key) && this.routes[key].action === action) {\n                        return this.routes[key];\n                    }\n                }\n            },\n\n            getCorrectUrl: function (uri) {\n                var url = this.prefix + '/' + uri.replace(/^\\/?/, '');\n\n                if(!this.absolute)\n                    return url;\n\n                return this.rootUrl.replace('/\\/?$/', '') + url;\n            }\n        };\n\n        var getLinkAttributes = function(attributes) {\n            if ( ! attributes) {\n                return '';\n            }\n\n            var attrs = [];\n            for (var key in attributes) {\n                if (attributes.hasOwnProperty(key)) {\n                    attrs.push(key + '=\"' + attributes[key] + '\"');\n                }\n            }\n\n            return attrs.join(' ');\n        };\n\n        var getHtmlLink = function (url, title, attributes) {\n            title      = title || url;\n            attributes = getLinkAttributes(attributes);\n\n            return '<a href=\"' + url + '\" ' + attributes + '>' + title + '</a>';\n        };\n\n        return {\n            // Generate a url for a given controller action.\n            // laroute.action('HomeController@getIndex', [params = {}])\n            action : function (name, parameters) {\n                parameters = parameters || {};\n\n                return routes.route(name, parameters, routes.getByAction(name));\n            },\n\n            // Generate a url for a given named route.\n            // laroute.route('routeName', [params = {}])\n            route : function (route, parameters) {\n                parameters = parameters || {};\n\n                return routes.route(route, parameters);\n            },\n\n            // Generate a fully qualified URL to the given path.\n            // laroute.route('url', [params = {}])\n            url : function (route, parameters) {\n                parameters = parameters || {};\n\n                return routes.url(route, parameters);\n            },\n\n            // Generate a html link to the given url.\n            // laroute.link_to('foo/bar', [title = url], [attributes = {}])\n            link_to : function (url, title, attributes) {\n                url = this.url(url);\n\n                return getHtmlLink(url, title, attributes);\n            },\n\n            // Generate a html link to the given route.\n            // laroute.link_to_route('route.name', [title=url], [parameters = {}], [attributes = {}])\n            link_to_route : function (route, title, parameters, attributes) {\n                var url = this.route(route, parameters);\n\n                return getHtmlLink(url, title, attributes);\n            },\n\n            // Generate a html link to the given controller action.\n            // laroute.link_to_action('HomeController@getIndex', [title=url], [parameters = {}], [attributes = {}])\n            link_to_action : function(action, title, parameters, attributes) {\n                var url = this.action(action, parameters);\n\n                return getHtmlLink(url, title, attributes);\n            }\n\n        };\n\n    }).call(this);\n\n    /**\n     * Expose the class either via AMD, CommonJS or the global object\n     */\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return laroute;\n        });\n    }\n    else if (typeof module === 'object' && module.exports){\n        module.exports = laroute;\n    }\n    else {\n        window.laroute = laroute;\n    }\n\n}).call(this);\n\n"],"sourceRoot":"/source/"}